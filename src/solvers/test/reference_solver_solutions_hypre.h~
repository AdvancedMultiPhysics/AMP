#include "AMP/solvers/SolverStrategy.h"

#include <iomanip>
#include <map>

// global data structure mapping an input file to a tuple of
// the reference number of iterations, final residual L2 norm,
// and the tolerance to which the final residual must match
std::map<std::string, int> conv_map{
    { "input_testLinearSolvers-LinearThermalRobin-BoomerAMG", 14 },
    { "input_testLinearSolvers-LinearThermalRobin-BoomerAMG-CG", 7 },
    { "input_testLinearSolvers-LinearThermalRobin-CylMesh-BoomerAMG", 16 },
    { "input_testLinearSolvers-LinearThermalRobin-CylMesh-BoomerAMG-CG", 9 },
    { "input_testLinearSolvers-LinearThermalRobin-BoomerAMG-GMRES", 8 },
    { "input_testLinearSolvers-LinearThermalRobin-BoomerAMG-FGMRES", 8 },
    { "input_testLinearSolvers-LinearThermalRobin-BoomerAMG-BiCGSTAB", 4 },
    { "input_testLinearSolvers-LinearThermalRobin-BoomerAMG-TFQMR", 5 },
    { "input_testLinearSolvers-LinearThermalRobin-BoomerAMG-PetscFGMRES", 8 },
    { "input_testLinearSolvers-LinearThermalRobin-BoomerAMG-HypreCG", 8 },
    { "input_testLinearSolvers-LinearThermalRobin-DiagonalPC-HypreCG", 5 },
    { "input_testLinearSolvers-LinearThermalRobin-HypreCG", 25 }
};

// Function to get the "solution" convergence rate and iteration count for the
// given input
static int get_regression_solution( const std::string &input )
{
    auto it = conv_map.find( input );
    return ( it != conv_map.end() ) ? it->second : 0;
}

static bool known_solution( const std::string &input )
{
    return ( conv_map.find( input ) != conv_map.end() );
}

static void checkConvergence( AMP::Solver::SolverStrategy *solver,
                              const std::string &inputFile,
                              AMP::UnitTest &ut )
{
    const auto residualNorm = solver->getResidualNorm();
    const auto status       = solver->getConvergenceStatus();
    const auto statusStr    = AMP::Solver::SolverStrategy::statusString( status );
    const bool acceptConv =
        status == AMP::Solver::SolverStrategy::SolverStatus::ConvergedOnAbsTol ||
        status == AMP::Solver::SolverStrategy::SolverStatus::ConvergedOnRelTol;

    if ( known_solution( inputFile ) ) {
        // Check the convergence rate to see if it changed
        auto ref_iter = get_regression_solution( inputFile );
        if ( ref_iter > 0 ) {
            int iter = solver->getIterations();
            if ( iter > ref_iter || !acceptConv ) {
                AMP::pout << "FAILED: test_CellPreconditioner " << inputFile << std::endl;
                AMP::pout << "Iterations: " << iter << " larger than max " << ref_iter << std::endl;
                AMP::pout << "Status: " << statusStr
                          << " is not ConvergedOnAbsTol or ConvergedOnRelTol" << std::endl;
                ut.failure( "FAILED: convergence rate test" );
            } else {
                ut.passes( "Passes convergence rate test" );
            }
        }
    } else {
        if ( acceptConv ) {
            ut.passes( "Solver has converged." );
        } else {
            AMP::pout << "Solver has NOT converged." << std::endl;
            AMP::pout << "Status: " << statusStr << " is not ConvergedOnAbsTol or ConvergedOnRelTol"
                      << std::endl;
            ut.failure( "Solver has NOT converged." );
        }
    }
}
