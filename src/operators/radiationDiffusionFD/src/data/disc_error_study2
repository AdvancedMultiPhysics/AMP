# The solver doesn't seem to converge for 2D w/ fluxLimiting..

# Basic, model-independent, PDE parameters
PDE {
  print_info_level = 1

  dim = 2
  
  problemID = "Manufactured"
  fluxLimited = FALSE
  #fluxLimited = TRUE
}

Manufactured_Parameters{ 
  model = "nonlinear"
  #model = "linear"

  z = 1.0

  k11 = 1.0
  k12 = 1.0
  k21 = 1.0
  k22 = 1.0
  #k11 = 0.0
  #k12 = 0.0
  #k21 = 0.0
  #k22 = 0.0
  
  a1 = 0.25
  b1 = 0.5
  a2 = 0.25
  b2 = 0.5
  #
  a3 = 0.6
  b3 = 0.45
  a4 = 0.5
  b4 = 1.3
}

TimeIntegrator {
    output = TRUE

    name = "BDF2"
    implicit_integrator = "BDF2"
    # name = "BDF1"
    # implicit_integrator = "BDF1"
    
    max_integrator_steps = 1000
    initial_time = 0.0
    final_time = 0.5
    print_info_level = 1
    
    user_managed_time_operator = TRUE # User builds I + gamma*f
    timestep_selection_strategy = "constant"
    use_predictor = FALSE
    auto_component_scaling = FALSE # Turn off component scaling for multi-physics
    solver_name = "Solver"

    Solver{
      name = "PetscSNESSolver"
      max_iterations = 10
      print_info_level = 1
      max_error = 1e-10
      absolute_tolerance = 1.0e-6
      relative_tolerance = 1.0e-6
      #stepTolerance = 1.0e-14
      maximumFunctionEvals = 1000
      usesJacobian=FALSE # Use Petsc FD-based approx of Jacobian
      # usesJacobian=TRUE # Use my own explicit Jacobian (not set up)

      SNESOptions = "-snes_monitor -snes_type ls -snes_converged_reason -snes_linesearch_monitor"
      # -snes_linesearch_monitor

      # This is the Krylov solver for the Jacobian systems
      LinearSolver{
        name = "PetscKrylovSolver"
        print_info_level = 1
        max_iterations = 20
        max_error = 1e-6
        ksp_type = "fgmres"
        absolute_tolerance = 1.0e-6
        relative_tolerance = 1.0e-6
        divergence_tolerance = 1.0e03
        max_krylov_dimension = 300
        #uses_preconditioner=FALSE
        uses_preconditioner=TRUE
        pc_type = "shell"
        pc_side = "RIGHT"
        KSPOptions = "-ksp_converged_reason"
        #KSPOptions = "-ksp_monitor -ksp_converged_reason -ksp_max_it 20"

        # Let L be the approx Jacobian, then:

        # Use operator-split prec to approximately apply inv(L)
        Preconditioner{
          name = "BERadDifOpJacOpSplitPrec" # Name of the prec
          absolute_tolerance = 0.0
          relative_tolerance = 0.0
          print_info_level   = 0
          max_iterations     = 1 # Number of iterations of the preconditioner
          compute_residual   = FALSE # Compute final residual

            # Preconditioner for approximately inverting diag diffusion blocks
            DiffusionBlocks{
              name = "BoomerAMGSolver"
              print_info_level   = 0
              min_coarse_size    = 5
              relax_type         = 6 # Hybrid GS/Jacobi
              coarsen_type       = 10
              interp_type        = 17 # distance-two
              cycle_type         = 1
              relax_order        = 0
              strong_threshold   = 0.5
              absolute_tolerance = 0.0
              relative_tolerance = 0.0
              max_iterations     = 1
            }
        }
      }
    }
}





