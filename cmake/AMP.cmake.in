SET( AMP_VERSION @AMP_VERSION@ )

@PACKAGE_INIT@


# Set CMake policies
CMAKE_POLICY( SET CMP0057 NEW )


# Set some paths
SET_AND_CHECK( AMP_INSTALL_DIR "@AMP_INSTALL_DIR@"         )
SET_AND_CHECK( AMP_INCLUDE_DIR "@AMP_INSTALL_DIR@/include" )
SET_AND_CHECK( AMP_LIB_DIR     "@AMP_INSTALL_DIR@/lib"     )


# Disable link-time optimization
SET( DISABLE_LTO @DISABLE_LTO@ )


# Get the list of TPLs from AMP
SET( TPLS_REQUIRED @TPLs_LIST_FOUND@ )
SET( TPLS_OPTIONAL )


# Add any additional TPLs needed
FOREACH( tmp ${EXTRA_REQUIRED_TPLS} )
    IF ( NOT ( ${tmp} IN_LIST TPLS_REQUIRED ) )
        SET( TPLS_REQUIRED ${TPLS_REQUIRED} ${tmp} )
    ENDIF()
ENDFOREACH()
FOREACH( tmp ${EXTRA_OPTIONAL_TPLS} )
    IF ( NOT ( ${tmp} IN_LIST TPLS_REQUIRED ) AND NOT ( ${tmp} IN_LIST TPLS_OPTIONAL ) )
        SET( TPLS_OPTIONAL ${TPLS_OPTIONAL} ${tmp} )
    ENDIF()
ENDFOREACH()


# Macro to set a flag if it does not exist
MACRO( SET_TPL_VAR VAR )
    IF ( NOT ${VAR} )
        SET( ${VAR} ${ARGN} )
    ENDIF()
ENDMACRO()


# Set compilers in case we are overriding them
IF ( NOT TPLs_COMPILERS_INITIALIZED )
    SET_TPL_VAR( CMAKE_BUILD_TYPE          @CMAKE_BUILD_TYPE@          )
    SET_TPL_VAR( ENABLE_STATIC             @ENABLE_STATIC@             )
    SET_TPL_VAR( ENABLE_SHARED             @ENABLE_SHARED@             )
    SET_TPL_VAR( DISABLE_GOLD              @DISABLE_GOLD@              )
    SET_TPL_VAR( BUILD_STATIC_LIBS         @BUILD_STATIC_LIBS@         )
    SET_TPL_VAR( BUILD_SHARED_LIBS         @BUILD_SHARED_LIBS@         )
    SET_TPL_VAR( CMAKE_C_COMPILER          @CMAKE_C_COMPILER@          )
    SET_TPL_VAR( CMAKE_C_COMPILER_ID       @CMAKE_C_COMPILER_ID@       )
    SET_TPL_VAR( CMAKE_C_FLAGS            "@CMAKE_C_FLAGS@"            )
    SET_TPL_VAR( CMAKE_C_STANDARD          @CMAKE_C_STANDARD@          )
    SET_TPL_VAR( CMAKE_C_EXTENSIONS        OFF                         )
    SET_TPL_VAR( CMAKE_CXX_COMPILER        @CMAKE_CXX_COMPILER@        )
    SET_TPL_VAR( CMAKE_CXX_COMPILER_ID     @CMAKE_CXX_COMPILER_ID@     )
    SET_TPL_VAR( CMAKE_CXX_FLAGS          "@CMAKE_CXX_FLAGS@"          )
    SET_TPL_VAR( CMAKE_CXX_STANDARD        @CMAKE_CXX_STANDARD@        )
    SET_TPL_VAR( CMAKE_CXX_EXTENSIONS      OFF                         )
    SET_TPL_VAR( CMAKE_Fortran_COMPILER    @CMAKE_Fortran_COMPILER@    )
    SET_TPL_VAR( CMAKE_Fortran_COMPILER_ID @CMAKE_Fortran_COMPILER_ID@ )
    SET_TPL_VAR( CMAKE_Fortran_FLAGS      "@CMAKE_Fortran_FLAGS@"      )
    SET_TPL_VAR( LDLIBS                   "@LDLIBS@"                   )
    SET_TPL_VAR( LDFLAGS                  "@LDFLAGS@"                  )
    SET_TPL_VAR( LDLIBS_EXTRA             "@LDLIBS_EXTRA@"             )
    SET_TPL_VAR( LDFLAGS_EXTRA            "@LDFLAGS_EXTRA@"            )
ENDIF()


# Call the TPL builder with the appropriate TPLs for the AMP
SET( TPL_DIRECTORY "@TPL_DIRECTORY@" )
FIND_PACKAGE( TPLs REQUIRED ${TPLS_REQUIRED} OPTIONAL_COMPONENTS ${TPLS_OPTIONAL} PATHS ${TPL_DIRECTORY} )
INCLUDE_DIRECTORIES( ${TPLs_INCLUDE_DIRS} )
SET( AMP_MACRO_CMAKE "${TPLs_MACRO_CMAKE}" )


# Load a dummy timer if one was not include
IF ( NOT DEFINED TIMER_INCLUDE )
    FIND_PACKAGE( Timer REQUIRED  PATHS "${TPL_DIRECTORY}/cmake/dummyTimer" )
    SET( TPLs_INCLUDE_DIRS ${TPLs_INCLUDE_DIRS} ${TIMER_INCLUDE} )
ENDIF()


# Set the maximum number of processors for a test
IF ( NOT TEST_MAX_PROCS )
    SET( TEST_MAX_PROCS @TEST_MAX_PROCS@ )
ENDIF()


# Setup doxygen
SET( USE_DOXYGEN @USE_DOXYGEN@ )
SET( USE_EXT_DOXYGEN @USE_EXT_DOXYGEN@ )
IF ( USE_DOXYGEN OR USE_EXT_DOXYGEN )
    SET( USE_DOXYGEN TRUE )
    SET( USE_EXT_DOXYGEN TRUE )
ENDIF()
SET( AMP_DOC_DIRS @AMP_DOC_DIRS@ )


# Add the libraries for AMP
INCLUDE( "${AMP_LIB_DIR}/cmake/AMP/AMPTargets.cmake" )
INCLUDE_DIRECTORIES( ${AMP_INCLUDE_DIR} )
SET( CMAKE_INSTALL_RPATH "${AMP_LIB_DIR}" ${CMAKE_INSTALL_RPATH} )
SET( AMP_LIBRARIES AMP::amp )


# Check that all required components were found
CHECK_REQUIRED_COMPONENTS( AMP )



